version: 3

silent: true

includes:
  scripts:
    taskfile: ./.scripts
    dir: ./.scripts

vars:
  NENV: "node_modules"
  PENV: .venv

  SOURCE_FOLDERS: dice_roller tests
  TOML_FILES: pyproject.toml poetry.toml
  PYTHON_FILES:
    sh: find {{.SOURCE_FOLDERS}} -name '*.py' | tr '\n' ' '

  IMAGE_NAME: dice-roller

tasks:
  _deptry:
    internal: true
    cmds:
      - "{{.PENV}}/bin/deptry {{.COMMAND}}"

  _prettier:
    internal: true
    cmds:
      - "{{.NENV}}/.bin/prettier {{.COMMAND}}"

  _python:
    internal: true
    cmds:
      - "{{.PENV}}/bin/python {{.COMMAND}}"

  _pyright:
    internal: true
    cmds:
      - "{{.NENV}}/.bin/pyright {{.COMMAND}}"

  _sort_all:
    internal: true
    cmds:
      - cmd: "{{.PENV}}/bin/sort-all {{.COMMAND}} || [ {{.IGNORE_ERRORS}} = 'true' ]"
    vars:
      IGNORE_ERRORS: '{{.IGNORE_ERRORS | default "true"}}'

  _toml-sort:
    internal: true
    cmds:
      - "{{.PENV}}/bin/toml-sort {{.COMMAND}}"

  _with_nvm:
    internal: true
    cmds:
      - "source ${HOME}/.nvm/nvm.sh && nvm install && {{.COMMAND}}"

  init:
    desc: Initialize project environment
    cmds:
      - echo 'Installing node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm install" }

      - echo 'Installing husky pre-commit...'
      - task: _with_nvm
        vars: { COMMAND: "npm run prepare" }

      - echo 'Installing python dependencies...'
      - poetry install --with dev --all-extras

      - echo 'Installing .scripts dependencies...'
      - task: scripts:init

  lint:
    desc: Lint project
    cmds:
      - echo 'Running prettier checks...'
      - task: _prettier
        vars: { COMMAND: "--check ." }

      - echo 'Running poetry checks...'
      - poetry check --lock

      - echo 'Run deptry checks...'
      - task: _deptry
        vars: { COMMAND: "." }

      - echo 'Running black checks...'
      - task: _python
        vars: { COMMAND: -m black --check . }

      - echo 'Running toml-sort checks...'
      - task: _toml-sort
        vars: { COMMAND: "--check {{.TOML_FILES}}" }

      - echo 'Running sort-all autofixes...'
      - task: _sort_all
        vars:
          COMMAND: "{{.PYTHON_FILES}}"
          IGNORE_ERRORS: "false"
      - echo ''

      - echo 'Running ruff checks...'
      - task: _python
        vars: { COMMAND: "-m ruff check {{.SOURCE_FOLDERS}}" }

      - echo 'Running pyright checks...'
      - task: _pyright

      - echo 'Linting .scripts'
      - task: scripts:lint

  lint-fix:
    desc: Lint fix project
    cmds:
      - echo 'Running prettier fixes...'
      - task: _prettier
        vars: { COMMAND: "--write ." }

      - echo 'Running poetry fixes...'
      - poetry lock --no-update
      - poetry check

      - echo 'Run deptry checks...'
      - task: _deptry
        vars: { COMMAND: "." }

      - echo 'Running black fixes...'
      - task: _python
        vars: { COMMAND: -m black --safe . }

      - echo 'Running toml-sort fixes...'
      - task: _toml-sort
        vars: { COMMAND: "--in-place {{.TOML_FILES}}" }

      - echo 'Running sort-all fixes...'
      - task: _sort_all
        vars: { COMMAND: "{{.PYTHON_FILES}}" }

      - echo 'Running ruff fixes...'
      - task: _python
        vars: { COMMAND: "-m ruff check --fix {{.SOURCE_FOLDERS}}" }

      - echo 'Running pyright fixes...'
      - task: _pyright

      - echo 'Fixing .scripts'
      - task: scripts:lint-fix

  image-build:
    desc: Build image target for local usage
    requires:
      vars:
        - TARGET
    cmds:
      - echo 'Building image {{.TARGET}} target...'
      - docker build
        --load
        --build-arg BASE_BUILDER_IMAGE=python:{{.PYTHON_VERSION}}
        --build-arg BASE_RUNTIME_IMAGE=python:{{.PYTHON_VERSION}}-slim
        --tag {{.IMAGE_NAME}}:{{.TARGET}}
        {{ if .TAG }}--tag {{.TAG}}{{ end }}
        --target {{.TARGET}}
        .
    vars:
      PYTHON_VERSION:
        sh: cat .python-version

  test:
    desc: Test project
    cmds:
      - echo 'Running tests...'
      - task: _python
        vars: { COMMAND: "-m pytest tests" }

  test-container:
    desc: Run tests in container
    cmds:
      - task: image-build
        vars: { TARGET: tests }

      - echo 'Running tests...'
      - docker run
        {{.IMAGE_NAME}}:tests

  test-coverage-run:
    desc: Run tests with coverage
    cmds:
      - task: _python
        vars: { COMMAND: "-m coverage run -m pytest tests" }

  test-coverage-report:
    desc: Show test coverage report
    cmds:
      - task: _python
        vars: { COMMAND: "-m coverage report -m --skip-covered --fail-under=100" }

  test-coverage-html:
    desc: Show test coverage report in browser
    cmds:
      - echo 'Generating test coverage report...'
      - task: _python
        vars: { COMMAND: "-m coverage html" }
      - task: _python
        vars: { COMMAND: "-m webbrowser -t {{.coverage_html}}" }
    vars:
      coverage_html:
        sh: "[ $(uname) = 'Darwin' ] && echo 'file://$(pwd)/htmlcov/index.html' || echo 'htmlcov/index.html'"

  clean:
    desc: Clean project environment
    cmds:
      - echo 'Cleaning node dependencies...'
      - rm -rf {{.NENV}}

      - echo 'Cleaning python dependencies...'
      - rm -rf {{.PENV}}

      - echo 'Cleaning pytest cache...'
      - rm -rf .pytest_cache

      - echo 'Cleaning ruff cache...'
      - rm -rf .ruff_cache

      - echo 'Cleaning coverage results...'
      - rm -rf .coverage
      - rm -rf htmlcov

      - echo 'Cleaning .scripts dependencies...'
      - task: scripts:clean

  dependencies-update:
    desc: Update dependencies
    cmds:
      - echo 'Updating node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm update" }

      - echo 'Updating python dependencies...'
      - poetry update

      - echo 'Updating .scripts dependencies...'
      - task: scripts:dependencies-update

  dependencies-check:
    desc: Check dependencies
    cmds:
      - echo 'Checking node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm outdated" }
      - task: _with_nvm
        vars: { COMMAND: "npm audit" }

      - echo 'Checking python dependencies...'
      - poetry show --outdated

      - echo 'Checking .scripts dependencies...'
      - task: scripts:dependencies-check

  dev-server-start:
    desc: Start development application
    cmds:
      - echo 'Starting server...'
      - "{{.PENV}}/bin/dice-roller {{.CLI_ARGS}}"

  dev-server-container-start:
    desc: Start development application in container
    cmds:
      - task: image-build
        vars: { TARGET: runtime }

      - echo 'Running container...'
      - docker run
        --env TELEGRAM_APP_TOKEN
        {{.IMAGE_NAME}}:runtime
        {{.CLI_ARGS}}

  update-from-template:
    desc: Update project from template
    cmds:
      - echo 'Updating project from template...'
      - cookiecutter
        --no-input
        --overwrite-if-exists
        --output-dir ../
        {{.TEMPLATE_PATH}}
        project_name='Dice Roller'
        project_slug='dice-roller'
        node_version='v20.15.1'
        owner_name='Dmitry Ovsiannikov'
        owner_github_login='ovsds'
        scripts='true'
        services=''
    vars:
      TEMPLATE_PATH: '{{.TEMPLATE_PATH | default "https://github.com/ovsds/template-repository"}}'

  login-gh-cli:
    desc: Login to GitHub CLI
    cmds:
      - echo 'Logging to GitHub CLI...'
      - gh auth login
        --scopes=read:packages,write:packages
        --hostname github.com
        --git-protocol https
        --web

  login-vault:
    desc: Login to vault
    cmds:
      - echo 'Logging vault with GitHub token...'
      - vault login
        -method=github
        -address=https://vault.ovsds.ru
        -no-print
        token=$(gh auth token)

  ci-image-build:
    desc: Build image target for CI usage
    requires:
      vars:
        - IMAGE_TAG
        - IMAGE_REGISTRY
    cmds:
      - task: image-build
        vars:
          TARGET: runtime
          TAG: "{{.IMAGE_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}"

  ci-image-push:
    desc: Push image to registry for CI usage
    requires:
      vars:
        - IMAGE_TAG
        - IMAGE_REGISTRY
    cmds:
      - echo 'Uploading backend image...'
      - docker push {{.IMAGE_REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}
