version: 3

silent: true

vars:
  NENV: "node_modules"
  PENV: .venv

  SOURCE_FOLDERS: dice_roller tests
  TOML_FILES: pyproject.toml poetry.toml
  PYTHON_FILES:
    sh: find {{.SOURCE_FOLDERS}} -name '*.py' | tr '\n' ' '

tasks:
  _deptry:
    internal: true
    cmds:
      - "{{.PENV}}/bin/deptry {{.COMMAND}}"

  _prettier:
    internal: true
    cmds:
      - "{{.NENV}}/.bin/prettier {{.COMMAND}}"

  _python:
    internal: true
    cmds:
      - "{{.PENV}}/bin/python {{.COMMAND}}"

  _pyright:
    internal: true
    cmds:
      - "{{.NENV}}/.bin/pyright {{.COMMAND}}"

  _sort_all:
    internal: true
    cmds:
      - cmd: "{{.PENV}}/bin/sort-all {{.COMMAND}} || [ {{.IGNORE_ERRORS}} = 'true' ]"
    vars:
      IGNORE_ERRORS: '{{.IGNORE_ERRORS | default "true"}}'

  _toml-sort:
    internal: true
    cmds:
      - "{{.PENV}}/bin/toml-sort {{.COMMAND}}"

  _with_nvm:
    internal: true
    cmds:
      - "source ${HOME}/.nvm/nvm.sh && nvm install && {{.COMMAND}}"

  init:
    desc: Initialize project environment
    cmds:
      - echo 'Installing node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm install" }

      - echo 'Installing husky pre-commit...'
      - task: _with_nvm
        vars: { COMMAND: "npm run prepare" }

      - echo 'Installing poetry version...'
      - poetry self update {{.POETRY_TARGET_VERSION}}

      - echo 'Installing python dependencies...'
      - poetry install --with dev
    vars:
      POETRY_TARGET_VERSION:
        sh: cat .poetry-version

  lint:
    desc: Lint project
    cmds:
      - echo 'Running prettier checks...'
      - task: _prettier
        vars: { COMMAND: "--check ." }

      - echo 'Running poetry checks...'
      - poetry check --lock

      - echo 'Run deptry checks...'
      - task: _deptry
        vars: { COMMAND: "." }

      - echo 'Running black checks...'
      - task: _python
        vars: { COMMAND: -m black --check . }

      - echo 'Running toml-sort checks...'
      - task: _toml-sort
        vars: { COMMAND: "--check {{.TOML_FILES}}" }

      - echo 'Running sort-all autofixes...'
      - task: _sort_all
        vars:
          COMMAND: "{{.PYTHON_FILES}}"
          IGNORE_ERRORS: "false"
      - echo ''

      - echo 'Running ruff checks...'
      - task: _python
        vars: { COMMAND: "-m ruff check {{.SOURCE_FOLDERS}}" }

      - echo 'Running pyright checks...'
      - task: _pyright

  lint-fix:
    desc: Lint fix project
    cmds:
      - echo 'Running prettier fixes...'
      - task: _prettier
        vars: { COMMAND: "--write ." }

      - echo 'Running poetry fixes...'
      - poetry lock --no-update
      - poetry check

      - echo 'Run deptry checks...'
      - task: _deptry
        vars: { COMMAND: "." }

      - echo 'Running black fixes...'
      - task: _python
        vars: { COMMAND: -m black --safe . }

      - echo 'Running toml-sort fixes...'
      - task: _toml-sort
        vars: { COMMAND: "--in-place {{.TOML_FILES}}" }

      - echo 'Running sort-all fixes...'
      - task: _sort_all
        vars: { COMMAND: "{{.PYTHON_FILES}}" }

      - echo 'Running ruff fixes...'
      - task: _python
        vars: { COMMAND: "-m ruff check --fix {{.SOURCE_FOLDERS}}" }

      - echo 'Running pyright fixes...'
      - task: _pyright

  test:
    desc: Test project
    cmds:
      - echo 'Running tests...'
      - task: _python
        vars: { COMMAND: "-m pytest tests" }

  test-coverage-run:
    desc: Run tests with coverage
    cmds:
      - echo 'Running test coverage...'
      - task: _python
        vars: { COMMAND: "-m coverage run -m pytest tests" }

  test-coverage-report:
    desc: Show test coverage report
    cmds:
      - echo 'Reporting test coverage...'
      - task: _python
        vars: { COMMAND: "-m coverage report -m" }

  test-coverage-html:
    desc: Show test coverage report in browser
    cmds:
      - echo 'Generating test coverage report...'
      - task: _python
        vars: { COMMAND: "-m coverage html" }
      - task: _python
        vars: { COMMAND: "-m webbrowser -t {{.coverage_html}}" }
    vars:
      coverage_html:
        sh: "[ $(uname) = 'Darwin' ] && echo 'file://$(pwd)/htmlcov/index.html' || echo 'htmlcov/index.html'"

  clean:
    desc: Clean project environment
    cmds:
      - echo 'Cleaning node dependencies...'
      - rm -rf {{.NENV}}

      - echo 'Cleaning python dependencies...'
      - rm -rf {{.PENV}}

      - echo 'Cleaning pytest cache...'
      - rm -rf .pytest_cache

      - echo 'Cleaning ruff cache...'
      - rm -rf .ruff_cache

      - echo 'Cleaning coverage results...'
      - rm -rf .coverage
      - rm -rf htmlcov

  dependencies-update:
    desc: Update dependencies
    cmds:
      - echo 'Updating node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm update" }
      - task: _with_nvm
        vars: { COMMAND: "npm outdated" }
      - task: _with_nvm
        vars: { COMMAND: "npm audit" }

      - echo 'Updating python dependencies...'
      - poetry update
      - poetry show --outdated

  update-from-template:
    desc: Update project from template
    cmds:
      - echo 'Updating project from template...'
      - cookiecutter
        --no-input
        --overwrite-if-exists
        --output-dir ../
        {{.TEMPLATE_PATH}}
        project_name="Dice Roller"
        project_slug="dice-roller"
        node_version="v20.15.1"
        github_owner="ovsds"
    vars:
      TEMPLATE_PATH: '{{.TEMPLATE_PATH | default "https://github.com/ovsds/template-repository"}}'
